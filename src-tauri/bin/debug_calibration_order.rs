//! Ë∞ÉËØïÊ†áÂÆöÊùøÂúÜÁÇπÊ£ÄÊµãÈ°∫Â∫èÈóÆÈ¢ò
//! 
//! Áî®‰∫éËØäÊñ≠ÈáçÊäïÂΩ±ËØØÂ∑ÆËøáÂ§ßÁöÑÂéüÂõ†

use std::fs;
use opencv::{core::{Size, Vector, Point2f, Point3f, Scalar}, imgcodecs, imgproc, prelude::*};
use merging_image_lib::modules::calibration_circles::*;

fn main() {
    println!("üîç Ë∞ÉËØïÊ†áÂÆöÊùøÂúÜÁÇπÊ£ÄÊµãÈ°∫Â∫è");
    println!("=====================================");
    
    // ÊµãËØï‰∏§ÁªÑÂõæÂÉè
    let good_image = r"C:\Users\Y000010\MVS\Data\point_5_4\png\l_0.png";
    let bad_image = r"D:\rust_projects\merging_image\src-tauri\captures\calibration_calibration_1755503179\calib_left_01.png";
    
    println!("\nüì∏ Á¨¨‰∏ÄÁªÑÔºàÊàêÂäüÔºâ: {}", good_image);
    analyze_calibration_image(good_image, "good");
    
    println!("\nüì∏ Á¨¨‰∫åÁªÑÔºàÂ§±Ë¥•Ôºâ: {}", bad_image);
    analyze_calibration_image(bad_image, "bad");
    
    println!("\nüî¨ ÂØπÊØîÂàÜÊûê");
    compare_detection_order(good_image, bad_image);
}

fn analyze_calibration_image(image_path: &str, label: &str) {
    // ÂàõÂª∫Ê†áÂÆöÂô®
    let mut calibrator = Calibrator::new(
        Size::new(2448, 2048),
        15.0,
        25.0,
        Size::new(4, 10),
        1.0,
    ).expect("ÂàõÂª∫Ê†áÂÆöÂô®Â§±Ë¥•");
    
    // ËØªÂèñÂõæÂÉè
    let img = imgcodecs::imread(image_path, imgcodecs::IMREAD_COLOR)
        .expect("ËØªÂèñÂõæÂÉèÂ§±Ë¥•");
    
    if img.empty() {
        println!("‚ùå ÂõæÂÉè‰∏∫Á©∫: {}", image_path);
        return;
    }
    
    // Ê£ÄÊµãÂúÜÁÇπ
    let centers = calibrator.find_asymmetric_circles_grid_points(&img, false)
        .expect("Ê£ÄÊµãÂúÜÁÇπÂ§±Ë¥•");
    
    println!("‚úÖ Ê£ÄÊµãÂà∞ {} ‰∏™ÂúÜÁÇπ", centers.len());
    
    // ÁîüÊàê‰∏ñÁïåÂùêÊ†á
    let world_points = calibrator.generate_world_points_from_list()
        .expect("ÁîüÊàê‰∏ñÁïåÂùêÊ†áÂ§±Ë¥•");
    
    // ÂàõÂª∫ÂèØËßÜÂåñÂõæÂÉè
    let mut vis_img = img.clone();
    
    // ÁªòÂà∂Ââç10‰∏™ÁÇπÁöÑÈ°∫Â∫èÂíåËøûÁ∫ø
    for i in 0..10.min(centers.len()) {
        let center = centers.get(i).unwrap();
        let world_pt = world_points.get(i).unwrap();
        
        // ÁªòÂà∂ÂúÜÁÇπ
        let color = match i {
            0 => Scalar::new(0.0, 0.0, 255.0, 0.0),     // Á¨¨1‰∏™ÁÇπÔºöÁ∫¢Ëâ≤
            1 => Scalar::new(0.0, 255.0, 0.0, 0.0),     // Á¨¨2‰∏™ÁÇπÔºöÁªøËâ≤
            2 => Scalar::new(255.0, 0.0, 0.0, 0.0),     // Á¨¨3‰∏™ÁÇπÔºöËìùËâ≤
            3 => Scalar::new(255.0, 255.0, 0.0, 0.0),   // Á¨¨4‰∏™ÁÇπÔºöÈùíËâ≤
            _ => Scalar::new(128.0, 128.0, 128.0, 0.0), // ÂÖ∂‰ªñÔºöÁÅ∞Ëâ≤
        };
        
        imgproc::circle(
            &mut vis_img,
            opencv::core::Point::new(center.x as i32, center.y as i32),
            10,
            color,
            -1,
            imgproc::LINE_8,
            0
        ).unwrap();
        
        // Ê∑ªÂä†Â∫èÂè∑Âíå‰∏ñÁïåÂùêÊ†á
        let text = format!("{}:({:.0},{:.0})", i, world_pt.x, world_pt.y);
        imgproc::put_text(
            &mut vis_img,
            &text,
            opencv::core::Point::new(center.x as i32 + 15, center.y as i32 - 10),
            imgproc::FONT_HERSHEY_SIMPLEX,
            0.5,
            color,
            2,
            imgproc::LINE_8,
            false
        ).unwrap();
        
        // ËøûÊé•Ââç4‰∏™ÁÇπÂΩ¢ÊàêÂèÇËÄÉÁ∫ø
        if i > 0 && i < 4 {
            let prev_center = centers.get(i-1).unwrap();
            imgproc::line(
                &mut vis_img,
                opencv::core::Point::new(prev_center.x as i32, prev_center.y as i32),
                opencv::core::Point::new(center.x as i32, center.y as i32),
                Scalar::new(255.0, 0.0, 255.0, 0.0),
                2,
                imgproc::LINE_8,
                0
            ).unwrap();
        }
    }
    
    // ‰øùÂ≠òÂèØËßÜÂåñÁªìÊûú
    let output_file = format!("debug_order_{}.png", label);
    imgcodecs::imwrite(&output_file, &vis_img, &Vector::new()).unwrap();
    println!("üíæ ‰øùÂ≠òÂèØËßÜÂåñÁªìÊûú: {}", output_file);
    
    // ÊâìÂç∞Ââç10‰∏™ÁÇπÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
    println!("\nüìä Ââç10‰∏™ÁÇπÁöÑÂØπÂ∫îÂÖ≥Á≥ª:");
    println!("Â∫èÂè∑ | ÂõæÂÉèÂùêÊ†á(x,y) | ‰∏ñÁïåÂùêÊ†á(x,y)");
    println!("-----|---------------|---------------");
    for i in 0..10.min(centers.len()) {
        let center = centers.get(i).unwrap();
        let world_pt = world_points.get(i).unwrap();
        println!("{:3} | ({:4.0},{:4.0}) | ({:4.1},{:4.1})", 
                i, center.x, center.y, world_pt.x, world_pt.y);
    }
}

fn compare_detection_order(good_image: &str, bad_image: &str) {
    // ÂàõÂª∫Ê†áÂÆöÂô®
    let mut calibrator = Calibrator::new(
        Size::new(2448, 2048),
        15.0,
        25.0,
        Size::new(4, 10),
        1.0,
    ).expect("ÂàõÂª∫Ê†áÂÆöÂô®Â§±Ë¥•");
    
    // Ê£ÄÊµã‰∏§ÁªÑÂõæÂÉèÁöÑÂúÜÁÇπ
    let img1 = imgcodecs::imread(good_image, imgcodecs::IMREAD_COLOR).unwrap();
    let img2 = imgcodecs::imread(bad_image, imgcodecs::IMREAD_COLOR).unwrap();
    
    let centers1 = calibrator.find_asymmetric_circles_grid_points(&img1, false).unwrap();
    let centers2 = calibrator.find_asymmetric_circles_grid_points(&img2, false).unwrap();
    
    println!("\nüî¨ Ê£ÄÊµãÈ°∫Â∫èÂØπÊØî:");
    
    // ÂàÜÊûêÁ¨¨‰∏Ä‰∏™ÁÇπÁöÑ‰ΩçÁΩÆÔºàÂ∫îËØ•Âú®Âè≥‰∏äËßíÔºâ
    let first_pt1 = centers1.get(0).unwrap();
    let first_pt2 = centers2.get(0).unwrap();
    
    println!("Á¨¨‰∏Ä‰∏™ÁÇπ‰ΩçÁΩÆ:");
    println!("  Â•ΩÂõæÂÉè: ({:.0}, {:.0})", first_pt1.x, first_pt1.y);
    println!("  ÂùèÂõæÂÉè: ({:.0}, {:.0})", first_pt2.x, first_pt2.y);
    
    // Âà§Êñ≠ÊòØÂê¶Âú®Âêå‰∏ÄË±°Èôê
    let quadrant1 = get_quadrant(&first_pt1, 2448, 2048);
    let quadrant2 = get_quadrant(&first_pt2, 2448, 2048);
    
    println!("Á¨¨‰∏Ä‰∏™ÁÇπÊâÄÂú®Ë±°Èôê:");
    println!("  Â•ΩÂõæÂÉè: {}", quadrant1);
    println!("  ÂùèÂõæÂÉè: {}", quadrant2);
    
    if quadrant1 != quadrant2 {
        println!("\n‚ö†Ô∏è Ë≠¶ÂëäÔºö‰∏§ÁªÑÂõæÂÉèÁöÑÂúÜÁÇπÊ£ÄÊµãÈ°∫Â∫èÂèØËÉΩ‰∏çÂêåÔºÅ");
        println!("ËøôÂèØËÉΩÊòØÂõ†‰∏∫Ôºö");
        println!("1. Ê†áÂÆöÊùøÊñπÂêë‰∏çÂêåÔºàÊóãËΩ¨ÊàñÈïúÂÉèÔºâ");
        println!("2. OpenCVÂú®‰∏çÂêåÊù°‰ª∂‰∏ãÈÄâÊã©‰∫Ü‰∏çÂêåÁöÑËµ∑ÂßãÁÇπ");
        
        println!("\nüí° Âª∫ËÆÆËß£ÂÜ≥ÊñπÊ°àÔºö");
        println!("1. Á°Æ‰øùÊâÄÊúâÊ†áÂÆöÂõæÂÉè‰∏≠Ê†áÂÆöÊùøÊñπÂêë‰∏ÄËá¥");
        println!("2. Âú®Ê†áÂÆöÊùø‰∏äÊ∑ªÂä†ÊòéÊòæÁöÑÊñπÂêëÊ†áËÆ∞");
        println!("3. ‰ΩøÁî®ChArUcoÊ†áÂÆöÊùøÔºàÂ∏¶ÊúâÊñπÂêëÊÄßÔºâ");
    } else {
        println!("\n‚úÖ ‰∏§ÁªÑÂõæÂÉèÁöÑÂúÜÁÇπÊ£ÄÊµãÈ°∫Â∫èÁúãËµ∑Êù•‰∏ÄËá¥");
        println!("ÈáçÊäïÂΩ±ËØØÂ∑ÆÂèØËÉΩÁî±ÂÖ∂‰ªñÂõ†Á¥†ÂØºËá¥Ôºö");
        println!("1. ÂúÜÂøÉÂÆö‰ΩçÁ≤æÂ∫¶ÔºàÂÖâÁÖß/ÂØπÁÑ¶ÂΩ±ÂìçÔºâ");
        println!("2. ÈïúÂ§¥Áï∏ÂèòÊ®°Âûã‰∏çÈÄÇÁî®");
        println!("3. Áõ∏Êú∫ÂèÇÊï∞ÂàùÂßã‰º∞ËÆ°‰∏çÂáÜÁ°Æ");
    }
    
    // ËÆ°ÁÆóÂâç4‰∏™ÁÇπÂΩ¢ÊàêÁöÑÂêëÈáèÊñπÂêë
    if centers1.len() >= 4 && centers2.len() >= 4 {
        println!("\nüìê Ââç4‰∏™ÁÇπÁöÑÊéíÂàóÊñπÂêëÂàÜÊûê:");
        
        let vec1 = compute_first_vector(&centers1);
        let vec2 = compute_first_vector(&centers2);
        
        println!("Á¨¨0->1ÁÇπÂêëÈáè:");
        println!("  Â•ΩÂõæÂÉè: ({:.0}, {:.0})", vec1.0, vec1.1);
        println!("  ÂùèÂõæÂÉè: ({:.0}, {:.0})", vec2.0, vec2.1);
        
        // ËÆ°ÁÆóÂêëÈáèÂ§πËßí
        let angle = compute_angle(vec1, vec2);
        println!("ÂêëÈáèÂ§πËßí: {:.1}¬∞", angle);
        
        if angle > 90.0 {
            println!("‚ö†Ô∏è Ê†áÂÆöÊùøÂèØËÉΩÊóãËΩ¨‰∫Ü180¬∞ÊàñÈïúÂÉè!");
        }
    }
}

fn get_quadrant(pt: &Point2f, width: i32, height: i32) -> &'static str {
    let cx = width as f32 / 2.0;
    let cy = height as f32 / 2.0;
    
    if pt.x < cx && pt.y < cy {
        "Â∑¶‰∏ä"
    } else if pt.x >= cx && pt.y < cy {
        "Âè≥‰∏ä"
    } else if pt.x < cx && pt.y >= cy {
        "Â∑¶‰∏ã"
    } else {
        "Âè≥‰∏ã"
    }
}

fn compute_first_vector(centers: &Vector<Point2f>) -> (f32, f32) {
    let p0 = centers.get(0).unwrap();
    let p1 = centers.get(1).unwrap();
    (p1.x - p0.x, p1.y - p0.y)
}

fn compute_angle(v1: (f32, f32), v2: (f32, f32)) -> f32 {
    let dot = v1.0 * v2.0 + v1.1 * v2.1;
    let mag1 = (v1.0 * v1.0 + v1.1 * v1.1).sqrt();
    let mag2 = (v2.0 * v2.0 + v2.1 * v2.1).sqrt();
    let cos_angle = dot / (mag1 * mag2);
    cos_angle.acos().to_degrees()
} 